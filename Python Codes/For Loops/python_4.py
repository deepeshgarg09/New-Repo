# -*- coding: utf-8 -*-
"""Python_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OvGmr28PqrtTqGwFxH9QLuCMS86lnuTx

# **Repetition Structures**

Python has two primitive loop commands:

* while loops
* for loops

## **`while` Loop**

With the while loop we can execute a set of statements as long as a condition is true.
"""

# Print i as long as i is less than 6:

i = 1
while i < 6:
  print(i)
  i += 1

"""**Note:** remember to increment i, or else the loop will continue forever.

The `while` loop requires relevant variables to be ready, in this example we need to define an indexing variable, `i`, which we set to 1.

### **`break` Statement**

With the break statement we can stop the loop even if the while condition is true:
"""

# Exit the loop when i is 3:

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

"""### **`continue` Statement**

With the continue statement we can stop the current iteration, and continue with the next:
"""

# Continue to the next iteration if i is 3:

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

"""### **else Statement**

With the else statement we can run a block of code once when the condition no longer is true:
"""

# Print a message once the condition is false:

i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")

"""## **`for` loops**

* A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

* This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.

* With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc.
"""

# Print each fruit in a fruit list:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)

"""**The for loop does not require an indexing variable to set beforehand.**

### **Looping Through a String**

Even strings are iterable objects, they contain a sequence of characters:
"""

# Loop through the letters in the word "banana":

for x in "banana":
  print(x)

"""### **`break` Statement**

With the break statement we can stop the loop before it has looped through all the items:
"""

# Exit the loop when x is "banana":

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

# Exit the loop when x is "banana", but this time the break comes before the print:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    break
  print(x)

"""### **`continue` Statement**

With the continue statement we can stop the current iteration of the loop, and continue with the next:
"""

# Do not print banana:

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)

"""### **`range()` Function**

* To loop through a set of code a specified number of times, we can use the `range()` function. 
* The `range()` function returns a sequence of numbers, starting from `0` by default, and increments by `1` (by default), and ends at a specified number.
"""

# Using the range() function:

for x in range(6):
  print(x)

"""**Note:** `range(6)` is not the values of `0` to `6`, but the values `0` to `5`.

The `range()` function defaults to `0` as a starting value, however it is possible to specify the starting value by adding a parameter: `range(2, 6)`, which means values from `2` to `6` (but not including `6`):
"""

# Using the start parameter:

for x in range(2, 6):
  print(x)

"""The `range()` function defaults to increment the sequence by `1`, however it is possible to specify the increment value by adding a third parameter: `range(2, 30, 3)`:"""

# Increment the sequence with 3 (default is 1):

for x in range(2, 30, 3):
  print(x)

"""### Iterating over a sequence"""

names = ['Ram', 'Shyam', 'Sita']
for position in range(len(names)):
    print(position, names[position])

"""### Understanding the code

* `len(surnames)` is the length of the surnames list: 3
* `range(len(surnames))` is actually transformed into `range(3)`. 
* This gives us the range as `[0, 3)`, which is basically a sequence (0, 1, 2). 

This means that the for loop will run three iterations. 

1. In the first one, position will take value 0, 
2. while in the second one, it will take value 1, and 
3. finally value 2 in the third and last iteration.

This style of looping is actually much closer to languages such as Java or C++. 

In Python, it's quite rare to see code like this. You can just iterate over any sequence or collection, so there is no need to get the list of positions and retrieve elements out of a sequence at each iteration. 

It's needlessly expensive. 

Let's change the example into a more Pythonic form:
"""

names = ['Ram', 'Shyam', 'Sita']
for name in names:
    print(name)

"""The for loop can iterate over the surnames list, and it gives back each element in order at each interaction.

### **`else` in `for` Loops**

The `else` keyword in a `for` loop specifies a block of code to be executed when the loop is finished:
"""

# Print all numbers from 0 to 5, and print a message when the loop has ended:

for x in range(6):
  print(x)
else:
  print("Finally finished!")

"""### **Nested Loops**

A nested loop is a loop inside a loop.

The "inner loop" will be executed one time for each iteration of the "outer loop":
"""

# Print each adjective for every fruit:

adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
  for y in fruits:
    print(x, y)

"""### **The pass Statement**

`for` loops cannot be empty, but if you for some reason have a `for` loop with no content, put in the `pass` statement to avoid getting an error.
"""

for x in [0, 1, 2]:
  pass

"""## **Practice Examples**

Ask which direction the user wants to count (up or down). 


* If they select up, then ask them for the top number and then count from 1 to that number. 

* If they select down, ask them to enter a number below 20 and then count down from 20 to that number. 

* If they entered something other than up or down, display the message “I don’t understand”.
"""

direction = input("Do you want to count up or down? (u/d) ") 
if direction == "u": 
    num = int(input("What is the top number? ")) 
    for i in range(1, num+1): 
        print (i) 
elif direction == "d": 
    num = int(input("Enter a number below 20: ")) 
    for i in range(20, num-1, -1): 
        print (i) 
else: print("I don't understand")